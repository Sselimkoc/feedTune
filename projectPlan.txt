# FeedTune Proje Planı

## Proje Yapısı
- src/
  - app/
    - layout.js
    - page.js
  - components/
    - ui/
    - layout/
    - features/
  - lib/
  - styles/
  - utils/

## Özellikler
1. Kullanıcı Arayüzü
   - Responsive tasarım
   - Modern ve temiz arayüz
   - Kolay navigasyon
   - Dark/Light tema desteği

2. Ana Özellikler
   - RSS feed okuyucu
   - Feed kategorileri
   - Favori feedler
   - Okunmamış/Okunmuş takibi
   - Feed arama
   - Feed paylaşma

3. Kullanıcı Yönetimi
   - Kullanıcı kaydı
   - Oturum yönetimi
   - Profil yönetimi
   - Feed tercihleri

4. Teknik Özellikler
   - Next.js App Router
   - Tailwind CSS
   - Modern JavaScript
   - ESLint
   - Responsive Design
   - SEO optimizasyonu

## Teknoloji Yığını
- Next.js
- React
- Tailwind CSS
- ESLint
- RSS Parser
- Local Storage/Database

## Geliştirme Aşamaları
1. Temel Yapı
   - Proje kurulumu
   - Dizin yapısı
   - Temel bileşenler
   - Stil yapılandırması

2. Temel Özellikler
   - RSS feed okuma
   - Feed listeleme
   - Temel UI

3. Gelişmiş Özellikler
   - Kullanıcı yönetimi
   - Favori sistemi
   - Kategoriler
   - Arama

4. Optimizasyon
   - Performans
   - SEO
   - Erişilebilirlik
   - Test

5. Yayın
   - Son testler
   - Dökümantasyon
   - Deployment 

# FeedTune: Beslemeler Sayfası Yeniden Tasarım Planı

## Mevcut Sorunlar

1. **Yükleme Sorunları**:
   - Yükleme çubuğu sonunda "item yok" mesajı gösteriliyor
   - Yükleme durumundan içerik gösterimi geçişi düzgün değil
   - Bazen içerikler yüklense bile boş görünüm gösteriliyor

2. **Veri Akışı Sorunları**:
   - Beslemeler API'den çekiliyor ama UI'a yansımıyor
   - Veri durumu (loading, error, empty, success) doğru yönetilmiyor

3. **UI/UX Sorunları**:
   - Düzensiz yerleşimler
   - Görsel tutarsızlıklar
   - Performans sorunları (gereksiz yenilenme ve renderlar)

## Çözüm Stratejisi

### 1. Veri Yönetimi İyileştirmeleri

#### useFeedScreen Hook'unun İyileştirilmesi
- Önbellek stratejisini yeniden tasarla
- Veri durumları arasındaki geçişleri düzelt
- Yükleme durumlarını daha iyi takip et (initialLoading, contentLoading, refreshing)
- Hata yönetimini güçlendir

```javascript
// src/hooks/features/useFeedScreen.js
export function useFeedScreen() {
  // Daha detaylı yükleme durumları
  const [dataState, setDataState] = useState({
    isInitialLoading: true,         // İlk yükleme
    isTransitioning: false,         // Feed değişirken yükleme  
    isRefreshing: false,            // Kullanıcı tarafından yenileme
    isLoadingMore: false,           // Daha fazla içerik yükleme
    lastRefreshTime: null,          // Son yenileme zamanı
    hasInitialLoadCompleted: false, // İlk yükleme tamamlandı mı?
  });
  
  // Feed değişimlerini daha iyi takip et
  useEffect(() => {
    if (selectedFeedId !== prevSelectedFeedIdRef.current) {
      setDataState(prev => ({...prev, isTransitioning: true}));
      
      // Geçiş tamamlandığında durumu güncelle
      setTimeout(() => {
        setDataState(prev => ({...prev, isTransitioning: false}));
      }, 500);
      
      prevSelectedFeedIdRef.current = selectedFeedId;
    }
  }, [selectedFeedId]);
  
  // Erken durumda içerik olmadığını gösterir
  const isEmpty = useMemo(() => {
    if (isInitialLoading) return false;
    return !items || items.length === 0;
  }, [items, isInitialLoading]);
  
  // Durumları daha net iletiyor
  return {
    feeds,
    items: paginatedItems,
    isLoading: dataState.isInitialLoading || dataState.isTransitioning,
    isRefreshing: dataState.isRefreshing,
    isLoadingMore: dataState.isLoadingMore,
    isError,
    error,
    isEmpty,
    // ...diğer değerler
  };
}
```

#### Veri Senkronizasyonu İyileştirmeleri
- Feed değişikliklerinde gerçekleşecek veri senkronizasyonunu iyileştirme
- Beslemeler arasında geçiş yaparken veri durumunu koruyan geçiş animasyonları
- Var olan içerikleri durumlar arasında koru ve yeni içerikler geldiğinde güncelle

### 2. UI Bileşenlerinin İyileştirilmesi

#### ContentList Bileşeni İyileştirmesi
- Daha iyi durum yönetimi
- Skeleton UI iyileştirmeleri (Shimmer efektleri)
- Durumlar arası yumuşak geçişler

```jsx
// src/components/shared/ContentList.js
const ContentList = memo(function ContentList({
  items,
  viewMode,
  cardType,
  isLoading,
  isError,
  isRefreshing,
  error,
  emptyIcon,
  emptyTitle,
  emptyDescription,
  onRetry,
  onToggleFavorite,
  onToggleReadLater,
  onItemClick,
  bulkActions,
  selectable = false,
}) {
  const { t } = useLanguage();
  
  // Ana içerik yükleniyor
  if (isLoading && !items?.length) {
    return (
      <LoadingState 
        viewMode={viewMode}
        title={t("feeds.loadingState.title")}
        description={t("feeds.loadingState.description")}
      />
    );
  }
  
  // Hata durumu
  if (isError && !items?.length) {
    return (
      <ErrorState
        title={t("errors.loadingFailed")}
        description={error || t("errors.tryAgainLater")}
        actionText={t("common.retry")}
        onAction={onRetry}
      />
    );
  }
  
  // Boş durum (Yükleme ve hata durumu değilse)
  if (!isLoading && !isError && (!items || items.length === 0)) {
    return (
      <EmptyState
        icon={emptyIcon}
        title={emptyTitle || t("feeds.noItems")}
        description={emptyDescription || t("feeds.noItemsDescription")}
        actionText={onRetry ? t("common.refresh") : undefined}
        onAction={onRetry}
      />
    );
  }
  
  // İçerikler (Sayfa yenilenirken bile içerikleri göster)
  return (
    <AnimatePresence mode="wait" initial={false}>
      {/* Yenileme göstergesi */}
      {isRefreshing && (
        <motion.div 
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          exit={{ opacity: 0, height: 0 }}
          className="mb-4"
        >
          <div className="flex justify-center">
            <div className="h-1 w-full max-w-md bg-muted rounded-full overflow-hidden">
              <motion.div
                className="h-full bg-primary"
                initial={{ width: "0%" }}
                animate={{ width: "100%" }}
                transition={{ duration: 1 }}
              />
            </div>
          </div>
        </motion.div>
      )}
      
      {/* Ana içerik grid/list görünümü */}
      <motion.div
        key={`content-${cardType}`}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.3 }}
        className="w-full"
      >
        <div
          className={cn(
            viewMode === "list"
              ? "space-y-4 flex flex-col w-full"
              : "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6"
          )}
        >
          {/* İçerikler burada render edilir */}
          {Array.isArray(items) && items.map((item) => (
            <ContentCard
              key={item?.id || `item-${Math.random()}`}
              item={item}
              viewMode={viewMode}
              cardType={cardType}
              // ... diğer proplar
            />
          ))}
        </div>
      </motion.div>
    </AnimatePresence>
  );
});
```

#### ContentContainer Bileşeni İyileştirmesi
- Daha iyi durum yönetimi (boş durum, yükleme durumu, içerik durumu)
- Performans iyileştirmeleri
- Scroll konumunu koru

```jsx
// src/components/shared/ContentContainer.js
const ContentContainer = memo(function ContentContainer({
  // ...props
  items,
  isLoading,
  isError,
  error,
  isEmpty, // Yeni prop - içerik boşsa
  // ...diğer proplar
}) {
  // Scroll pozisyonunu koru
  const scrollContainerRef = useRef(null);
  const [scrollPosition, setScrollPosition] = useState(0);
  
  // Scroll pozisyonunu kaydet
  useEffect(() => {
    const handleScroll = () => {
      if (scrollContainerRef.current) {
        setScrollPosition(scrollContainerRef.current.scrollTop);
      }
    };
    
    const scrollContainer = scrollContainerRef.current;
    if (scrollContainer) {
      scrollContainer.addEventListener('scroll', handleScroll);
      return () => scrollContainer.removeEventListener('scroll', handleScroll);
    }
  }, []);
  
  // Feed değiştiğinde scroll'u en başa al
  useEffect(() => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollTop = 0;
    }
  }, [selectedFeedId]);
  
  return (
    <div className="flex flex-col min-h-screen relative">
      {/* ... */}
      <div 
        ref={scrollContainerRef}
        className="flex-1 overflow-y-auto"
      >
        <AnimatePresence mode="wait">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="flex flex-col lg:flex-row flex-1 gap-4 md:gap-6 p-3 md:p-6"
          >
            {/* ... Sidebar content ... */}
            
            {/* Main Content with improved layout */}
            <motion.main
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4 }}
              className={/* ... */}
            >
              <div className="p-4 md:p-6">
                {children || (
                  <ContentList
                    items={items}
                    viewMode={viewMode}
                    cardType={cardType}
                    isLoading={isLoading}
                    isError={isError}
                    error={error}
                    emptyIcon={emptyIcon}
                    emptyTitle={isEmpty ? emptyTitle : undefined}
                    emptyDescription={isEmpty ? emptyDescription : undefined}
                    onRetry={handleHeaderRefresh}
                    onToggleFavorite={onToggleFavorite}
                    onToggleReadLater={onToggleReadLater}
                    onItemClick={onItemClick}
                  />
                )}
              </div>
            </motion.main>
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
});
```

#### SkeletonCard Bileşeni İyileştirmesi
- Daha gerçekçi yükleme durumu
- Shimmer animasyonları iyileştirme
- İçerik tiplerine özgü skeleton'lar

```jsx
// src/components/shared/SkeletonCard.js
export function SkeletonCard({ viewMode = "grid", className, contentType = "default" }) {
  // Shimmer animasyon varyantları
  const shimmer = {
    initial: { x: "-100%" },
    animate: {
      x: "100%",
      transition: {
        repeat: Infinity,
        duration: 1.5,
        ease: "linear",
      },
    },
  };

  // İçerik tipine göre farklı renkler
  const getColors = () => {
    switch(contentType) {
      case 'youtube':
        return 'bg-red-500/10 from-red-500/5 via-red-500/10 to-red-500/5';
      case 'rss':
        return 'bg-blue-500/10 from-blue-500/5 via-blue-500/10 to-blue-500/5';
      default:
        return 'bg-primary/10 from-primary/5 via-primary/10 to-primary/5';
    }
  };
  
  // Grid görünümü için skeleton
  if (viewMode === "grid") {
    return (
      <motion.div
        initial={{ opacity: 0.6 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.3 }}
        className="h-full"
      >
        <Card
          className={cn(
            "w-full h-full overflow-hidden flex flex-col",
            className,
            "border-card/20"
          )}
        >
          {/* Görsel placeholder */}
          <div className={`aspect-video w-full relative overflow-hidden ${getColors()}`}>
            <motion.div
              className="absolute inset-0 w-full h-full bg-gradient-to-r from-transparent via-card/10 to-transparent"
              initial="initial"
              animate="animate"
              variants={shimmer}
            />
            
            {/* Badge ve diğer elemanlar... */}
          </div>
          
          {/* Başlık ve açıklama */}
          <div className="p-3 space-y-3 flex-1 flex flex-col">
            {/* ... */}
          </div>
        </Card>
      </motion.div>
    );
  }
  
  // List görünümü için skeleton
  return (
    <Card className={cn("w-full p-4 overflow-hidden", className, "border-card/20")}>
      {/* ... Liste görünümü skeleton içeriği ... */}
    </Card>
  );
}
```

### 3. FeedContainer Yeniden Tasarımı
- FeedContainer'ın hem boş durum hem de içerik durumu için daha iyi yönetimi
- Tüm durumlarda TooltipProvider'ı düzgün kullanma
- İçerik/boş durum/yükleme durumları için daha düzgün geçişler

```jsx
// src/components/features/feeds/layout/FeedContainer.js
export const FeedContainer = memo(function FeedContainer() {
  const {
    feeds,
    items,
    selectedFeed,
    viewMode,
    filters,
    stats,
    isLoading,
    isRefreshing,
    isLoadingMore,
    isInitialLoading,
    isTransitioning,
    isError,
    error,
    isEmpty,
    // ...diğer değerler ve fonksiyonlar
  } = useFeedScreen();
  
  // Feed başlığı ve açıklaması
  const feedTitle = useMemo(() => {
    if (selectedFeed) return selectedFeed.title;
    return t("feeds.title");
  }, [selectedFeed, t]);
  
  const feedDescription = useMemo(() => {
    if (selectedFeed) return selectedFeed.description || t("feeds.selectedFeedDescription");
    return t("feeds.description");
  }, [selectedFeed, t]);
  
  // Düzgün bir render işlemi
  return (
    <TooltipProvider>
      <div className="feed-container w-full h-full relative">
        <ContentContainer
          viewMode={viewMode}
          onViewModeChange={handleViewModeChange}
          onRefresh={isRefreshing ? undefined : refreshAll}
          isRefreshing={isRefreshing}
          headerIcon={feedHeaderIcon}
          headerTitle={feedTitle}
          headerDescription={feedDescription}
          isLoading={isLoading}
          isTransitioning={isTransitioning}
          isError={isError}
          error={error}
          isEmpty={isEmpty}
          showKeyboardShortcuts={showKeyboardShortcuts}
          onShowKeyboardShortcuts={handleShowKeyboardShortcuts}
          onKeyboardShortcutsChange={handleKeyboardShortcutsChange}
          extraHeaderButtons={extraButtons}
          sidebarContent={
            feeds && feeds.length > 0 ? (
              <FeedSidebar
                feeds={feeds}
                selectedFeed={selectedFeed}
                onFeedSelect={setActiveFilter}
                stats={stats}
              />
            ) : null
          }
          extraDialogs={/* ... */}
        >
          <div className="flex-1 min-w-0">
            {/* İçerik yükleme göstergesi (daha fazla yükleme için) */}
            {isLoadingMore && (
              <div className="flex justify-center mb-4">
                <span className="text-sm text-muted-foreground flex items-center gap-2">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  {t("feeds.loadingMore")}
                </span>
              </div>
            )}

            {/* Arama sonuçları göstergesi */}
            {searchQuery && (
              <div className="mb-4 flex items-center justify-between">
                <Badge variant="outline" className="px-3 py-1 text-sm gap-2">
                  <Search className="h-3 w-3" />
                  {t("search.resultsFor")} "{searchQuery}"
                </Badge>
                <Badge variant="secondary">
                  {filteredItems.length} {t("search.results")}
                </Badge>
              </div>
            )}

            {/* Ana içerik listesi */}
            <ContentList
              items={filteredItems}
              viewMode={viewMode}
              cardType="feed"
              isLoading={isLoading} 
              isRefreshing={isRefreshing}
              isError={isError}
              error={error}
              emptyIcon={<Rss className="h-10 w-10 opacity-20" />}
              emptyTitle={t("feeds.emptyTitle")}
              emptyDescription={t("feeds.emptyDescription")}
              onRetry={refreshAll}
              onToggleFavorite={toggleFavorite}
              onToggleReadLater={toggleReadLater}
              onItemClick={handleItemClick}
              bulkActions={bulkActions}
              selectable={bulkActions?.isBulkSelectionMode}
            />

            {/* Daha fazla buton */}
            {!isLoadingMore && filteredItems.length > 0 && pagination?.hasMore && (
              <div className="flex justify-center mt-8 mb-4">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={loadMoreItems}
                  disabled={isLoadingMore}
                  className="gap-2"
                >
                  {isLoadingMore ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <Plus className="h-4 w-4" />
                  )}
                  {t("feeds.loadMore")}
                </Button>
              </div>
            )}

            {/* Toplu aksiyonlar */}
            <AnimatePresence>{renderBulkActionBar()}</AnimatePresence>
          </div>
        </ContentContainer>
      </div>
    </TooltipProvider>
  );
});
```

### 4. Performans İyileştirmeleri

#### Gereksiz Render'ları Azaltma
- İçerik değişmediğinde yeniden render'ı önlemek için memo ve useMemo kullanımını artırma
- useCallback ile fonksiyonları memoize etme
- React.memo ile bileşenlerin gereksiz render'lanmasını engelleme

#### Veri Önbelleğe Alma İyileştirmeleri
- React Query ile veri önbelleğe alma stratejisini güçlendirme
- Feed geçişlerinde önbellekteki verileri hemen gösterme
- Veri dönüşümleri için önbelleğe alma (örn. feed başlıkları, istatistikler)

#### Lazy Loading ve Sanallaştırma
- İçerik listesini virtualize etme (büyük listeler için)
- Resimler için progressive loading
- Performans iyileştirmeleri için değişim algılama mekanizması
- Büyük listelerde windowing teknikleri kullanma

```jsx
// src/components/features/feeds/VirtualizedContentList.js
import { Virtuoso } from 'react-virtuoso';

export const VirtualizedContentList = memo(function VirtualizedContentList({
  items,
  viewMode,
  // ...diğer props
}) {
  if (viewMode === 'grid') {
    // Grid view için sanal liste (masonry grid)
    return (
      <GridVirtuoso
        data={items}
        itemContent={(index, item) => (
          <ContentCard
            key={item.id}
            item={item}
            viewMode="grid"
            // ...diğer props
          />
        )}
        // ...grid konfigürasyonu
      />
    );
  }
  
  // List view için sanal liste
  return (
    <Virtuoso
      data={items}
      itemContent={(index, item) => (
        <ContentCard
          key={item.id}
          item={item}
          viewMode="list"
          // ...diğer props
        />
      )}
      // ...list konfigürasyonu
    />
  );
});
```

### 5. Durum/Hata Yönetimi İyileştirmeleri

#### Yükleme Durumları
- İlk yükleme (ilk kez veri çekilirken)
- İçerik yükleme (beslemeler varken yeni içerik yükleme)
- Yenileme (kullanıcı tarafından tetiklenen)
- Daha fazla yükleme (sayfalama)
- Geçiş (örn. besleme değiştiğinde)

#### Hata Yönetimi
- Genel hata durumları
- İstek hataları (örn. bağlantı kesilmesi)
- Besleme bazlı hatalar (örn. geçersiz besleme)
- Hata mesajlarını özelleştirme
- İşlem bazlı hata gösterimi (örn. yenileme başarısız olduğunda)
- Retry mekanizmaları

#### Boş Durumlar
- Hiç besleme yokken
- Besleme varken içerik yokken
- Arama sonucunda içerik bulunamadığında
- Filtre sonucunda içerik bulunamadığında

## Uygulama Planı

### 1. Aşama: Hook'ların Yeniden Tasarımı
- useFeedScreen hook'unu iyileştir
- usePagination hook'unu iyileştir
- useFeedService hook'unu iyileştir

### 2. Aşama: Temel Bileşenlerin İyileştirilmesi
- SkeletonCard bileşenini iyileştir
- LoadingState bileşenini iyileştir
- EmptyState bileşenini iyileştir
- ErrorState bileşenini iyileştir

### 3. Aşama: Content Bileşenlerinin İyileştirilmesi
- ContentList bileşenini iyileştir
- ContentCard bileşenini iyileştir
- ContentContainer bileşenini iyileştir

### 4. Aşama: FeedContainer Bileşeninin Yeniden Tasarımı
- FeedContainer bileşenini iyileştir
- FeedSidebar bileşenini iyileştir
- Tooltip ve ekstra butonların entegrasyonunu sağla

### 5. Aşama: Test ve İyileştirme
- Performans testi
- Farklı durumlar için test senaryoları
- Her durumda UI/UX tutarlılığı kontrolü
- Hata yakalama ve işleme yeteneklerini test et
- Edge case'leri kontrol et (çok büyük liste, 0 içerik vb.) 