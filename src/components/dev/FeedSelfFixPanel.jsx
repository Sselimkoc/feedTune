"use client";

import { useState, useEffect } from "react";
import { authDebug } from "@/debug/authState";
import { feedDebug } from "@/debug/feedState";
import { db } from "@/lib/db";
import { RepositoryFixer } from "@/debug/RepositoryFixer";
import { RepositoryValidator } from "@/debug/RepositoryValidator";
import { FeedRepository } from "@/repositories/feedRepository";

// Repository sÄ±nÄ±fÄ±nÄ± dinamik olarak baÅŸlat
let feedRepositoryInstance = null;

/**
 * Feed veri sorunlarÄ±nÄ± debug ve onarma arayÃ¼zÃ¼
 */
export default function FeedSelfFixPanel() {
  const [isOpen, setIsOpen] = useState(false);
  const [userId, setUserId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState({});
  const [fixInProgress, setFixInProgress] = useState(false);
  const [fixResult, setFixResult] = useState(null);
  const [advancedMode, setAdvancedMode] = useState(false);
  const [repositoryLoaded, setRepositoryLoaded] = useState(false);

  // FeedRepository sÄ±nÄ±fÄ±nÄ± baÅŸlat
  useEffect(() => {
    if (isOpen && !repositoryLoaded) {
      try {
        feedRepositoryInstance = new FeedRepository();
        setRepositoryLoaded(true);
      } catch (error) {
        console.error("FeedRepository baÅŸlatÄ±lÄ±rken hata:", error);
      }
    }
  }, [isOpen, repositoryLoaded]);

  // KullanÄ±cÄ± kimliÄŸini al
  useEffect(() => {
    const getUserId = async () => {
      const id = await authDebug.getUserId();
      setUserId(id);
    };

    if (isOpen) {
      getUserId();
    }
  }, [isOpen]);

  // TanÄ±lama Ã§alÄ±ÅŸtÄ±r
  const runDiagnosis = async () => {
    if (!userId) {
      alert("KullanÄ±cÄ± ID'si bulunamadÄ±. LÃ¼tfen oturum aÃ§Ä±n.");
      return;
    }

    setIsLoading(true);
    setResults({});

    try {
      const diagnosticResult = await feedDebug.diagnoseSystem(userId);
      setResults(diagnosticResult);
      console.log("TanÄ±lama sonuÃ§larÄ±:", diagnosticResult);
    } catch (error) {
      console.error("TanÄ±lama hatasÄ±:", error);
      setResults({ error: error.message });
    } finally {
      setIsLoading(false);
    }
  };

  // Repository metotlarÄ±nÄ± doÄŸrula
  const runRepositoryValidation = async () => {
    if (!userId || !repositoryLoaded) {
      alert(
        repositoryLoaded
          ? "KullanÄ±cÄ± ID'si bulunamadÄ±. LÃ¼tfen oturum aÃ§Ä±n."
          : "Repository sÄ±nÄ±fÄ± henÃ¼z yÃ¼klenmedi. LÃ¼tfen bekleyin."
      );
      return;
    }

    setIsLoading(true);
    setResults({});

    try {
      // 1. KullanÄ±cÄ±nÄ±n feed'lerini al
      const feedsResult = await feedDebug.checkFeeds(userId);

      if (
        !feedsResult.success ||
        !feedsResult.feeds ||
        feedsResult.feeds.length === 0
      ) {
        setResults({
          success: false,
          message:
            "KullanÄ±cÄ± feed'leri alÄ±namadÄ±. Ã–nce feed'leri kontrol edin.",
          feedsResult,
        });
        return;
      }

      const feedIds = feedsResult.feeds.map((feed) => feed.id);

      // 2. getFeedItems metodunu doÄŸrula
      const getFeedItemsValidation =
        await RepositoryValidator.validateGetFeedItems(
          feedRepositoryInstance,
          feedIds,
          userId
        );

      // 3. SonuÃ§larÄ± raporla
      const hasProblem =
        getFeedItemsValidation.analysis?.hasParameterOrderIssue;

      const validationResults = {
        success: !hasProblem,
        message: hasProblem
          ? "Repository metodlarÄ±nda parametre sÄ±rasÄ± sorunu tespit edildi"
          : "Repository metodlarÄ± doÄŸru Ã§alÄ±ÅŸÄ±yor",
        timestamp: new Date().toISOString(),
        feedsResult,
        methodValidation: getFeedItemsValidation,
        hasProblem,
        problemType: hasProblem ? "parameterOrder" : null,
      };

      setResults(validationResults);
      console.log("Repository doÄŸrulama sonuÃ§larÄ±:", validationResults);
    } catch (error) {
      console.error("Repository doÄŸrulama hatasÄ±:", error);
      setResults({
        success: false,
        message: "Repository doÄŸrulama sÄ±rasÄ±nda hata oluÅŸtu",
        error: error.message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  // GeliÅŸmiÅŸ tanÄ±lama ve onarÄ±m
  const runAdvancedDiagnosis = async () => {
    if (!userId) {
      alert("KullanÄ±cÄ± ID'si bulunamadÄ±. LÃ¼tfen oturum aÃ§Ä±n.");
      return;
    }

    setIsLoading(true);
    setResults({});

    try {
      // 1. Repository metotlarÄ±nÄ± doÄŸrula
      if (repositoryLoaded) {
        await runRepositoryValidation();
      }

      // 2. Eksik etkileÅŸimleri onar
      const diagnosticResult = await RepositoryFixer.diagnoseAndFix(userId);
      setResults(diagnosticResult);
      console.log("GeliÅŸmiÅŸ tanÄ±lama ve onarÄ±m sonuÃ§larÄ±:", diagnosticResult);
    } catch (error) {
      console.error("GeliÅŸmiÅŸ tanÄ±lama hatasÄ±:", error);
      setResults({ error: error.message });
    } finally {
      setIsLoading(false);
    }
  };

  // Sorunu otomatik dÃ¼zelt
  const fixIssue = async () => {
    if (!userId) {
      alert("KullanÄ±cÄ± ID'si bulunamadÄ±. LÃ¼tfen oturum aÃ§Ä±n.");
      return;
    }

    setFixInProgress(true);
    setFixResult(null);

    try {
      // 1. Eksik etkileÅŸimleri onar
      const interactionFixResult =
        await RepositoryValidator.applyInteractionFix(userId);

      // 2. Ã–nbelleÄŸi temizle
      await clearCaches();

      // 3. Yeniden tanÄ±lama Ã§alÄ±ÅŸtÄ±r
      const diagnosticResult = await feedDebug.diagnoseSystem(userId);

      // 4. Sonucu rapor et
      setFixResult({
        success: interactionFixResult.success,
        interactions: interactionFixResult,
        diagnostic: diagnosticResult,
      });

      console.log("OnarÄ±m tamamlandÄ±:", {
        interactionFixResult,
        diagnostic: diagnosticResult,
      });
    } catch (error) {
      console.error("OnarÄ±m hatasÄ±:", error);
      setFixResult({
        success: false,
        error: error.message,
      });
    } finally {
      setFixInProgress(false);
    }
  };

  // Ã–nbellekleri temizle
  const clearCaches = async () => {
    try {
      // 1. DbClient Ã¶nbelleÄŸini temizle
      db.clearCache();

      // 2. TarayÄ±cÄ± Ã¶nbelleÄŸini temizle
      localStorage.removeItem("feedtune_cache");
      sessionStorage.removeItem("feedtune_cache");

      return true;
    } catch (error) {
      console.error("Ã–nbellek temizleme hatasÄ±:", error);
      return false;
    }
  };

  const togglePanel = () => setIsOpen(!isOpen);
  const toggleAdvancedMode = () => setAdvancedMode(!advancedMode);

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <button
        onClick={togglePanel}
        className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full shadow-lg flex items-center gap-2"
      >
        <span>ðŸ”§</span>
        <span>OnarÄ±m Paneli</span>
      </button>

      {isOpen && (
        <div className="absolute bottom-14 right-0 bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 w-[500px] max-h-[80vh] overflow-auto">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-bold">Feed Sistemi OnarÄ±m Paneli</h3>
            <button
              onClick={togglePanel}
              className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            >
              âœ•
            </button>
          </div>

          {/* KullanÄ±cÄ± bilgisi */}
          <div className="mb-6 p-4 bg-gray-100 dark:bg-gray-700 rounded-lg">
            <h4 className="text-lg font-semibold mb-2">KullanÄ±cÄ± Bilgisi</h4>
            <p>
              <strong>KullanÄ±cÄ± ID:</strong> {userId || "BulunamadÄ±"}
            </p>
            {!userId && (
              <p className="text-red-500 mt-2">
                LÃ¼tfen Ã¶nce oturum aÃ§Ä±n veya refresh yapÄ±n
              </p>
            )}
            <p className="mt-2 text-xs text-gray-600 dark:text-gray-400">
              <strong>Repository Durumu:</strong>{" "}
              {repositoryLoaded ? "YÃ¼klendi âœ“" : "YÃ¼kleniyor..."}
            </p>
          </div>

          {/* Mod seÃ§imi */}
          <div className="mb-4 flex items-center">
            <label
              htmlFor="advancedMode"
              className="flex items-center cursor-pointer"
            >
              <div className="relative">
                <input
                  id="advancedMode"
                  type="checkbox"
                  className="sr-only"
                  checked={advancedMode}
                  onChange={toggleAdvancedMode}
                />
                <div
                  className={`block ${
                    advancedMode
                      ? "bg-blue-500"
                      : "bg-gray-300 dark:bg-gray-600"
                  } w-12 h-6 rounded-full transition-colors`}
                ></div>
                <div
                  className={`dot absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition ${
                    advancedMode ? "transform translate-x-6" : ""
                  }`}
                ></div>
              </div>
              <span className="ml-3 text-gray-700 dark:text-gray-300">
                GeliÅŸmiÅŸ Mod
              </span>
            </label>
          </div>

          {/* TanÄ±lama */}
          <div className="mb-6 flex flex-wrap gap-2">
            {!advancedMode ? (
              <>
                <button
                  onClick={runDiagnosis}
                  disabled={isLoading || !userId}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50"
                >
                  {isLoading ? "TanÄ±lama..." : "Sistemi TanÄ±la"}
                </button>

                <button
                  onClick={fixIssue}
                  disabled={fixInProgress || !userId}
                  className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50"
                >
                  {fixInProgress ? "OnarÄ±lÄ±yor..." : "Otomatik Onar"}
                </button>
              </>
            ) : (
              <>
                <button
                  onClick={runAdvancedDiagnosis}
                  disabled={isLoading || !userId}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50 flex-grow"
                >
                  {isLoading ? "Ä°ÅŸlem YapÄ±lÄ±yor..." : "GeliÅŸmiÅŸ TanÄ± ve OnarÄ±m"}
                </button>

                {repositoryLoaded && (
                  <button
                    onClick={runRepositoryValidation}
                    disabled={isLoading || !userId}
                    className="bg-amber-500 hover:bg-amber-600 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50"
                  >
                    Repository Kontrol
                  </button>
                )}
              </>
            )}
          </div>

          {/* Metot Validasyon SonuÃ§larÄ± */}
          {results.methodValidation && (
            <div
              className={`p-4 rounded-lg mb-4 ${
                results.success
                  ? "bg-green-100 dark:bg-green-800/20"
                  : "bg-yellow-100 dark:bg-yellow-800/20"
              }`}
            >
              <h4 className="font-bold mb-2">Repository Analizi:</h4>
              <p className="mb-2">{results.message}</p>

              {results.hasProblem && (
                <div className="bg-white dark:bg-gray-900 p-3 rounded border border-yellow-300 dark:border-yellow-700 mb-3">
                  <p className="text-amber-700 dark:text-amber-400 font-medium">
                    Tespit Edilen Sorun:
                  </p>
                  <p className="text-sm">
                    {results.methodValidation.analysis.recommendedFix}
                  </p>
                </div>
              )}

              <div className="mt-3 text-sm">
                <p>
                  <strong>Standart Ã‡aÄŸrÄ±:</strong>{" "}
                  {results.methodValidation.standardResult.success
                    ? `BaÅŸarÄ±lÄ±, ${
                        results.methodValidation.standardResult
                          .interactionCount || 0
                      } etkileÅŸim`
                    : "BaÅŸarÄ±sÄ±z"}
                </p>
                <p>
                  <strong>Ters Parametre Ã‡aÄŸrÄ±sÄ±:</strong>{" "}
                  {results.methodValidation.reversedResult.success
                    ? `BaÅŸarÄ±lÄ±, ${
                        results.methodValidation.reversedResult
                          .interactionCount || 0
                      } etkileÅŸim`
                    : "BaÅŸarÄ±sÄ±z"}
                </p>
              </div>
            </div>
          )}

          {/* SonuÃ§lar */}
          {results.success !== undefined && !results.methodValidation && (
            <div
              className={`p-4 rounded-lg mb-4 ${
                results.success
                  ? "bg-green-100 dark:bg-green-800/20"
                  : "bg-red-100 dark:bg-red-800/20"
              }`}
            >
              <h4 className="font-bold mb-2">TanÄ±lama Sonucu:</h4>
              <p>{results.message}</p>

              {/* GeliÅŸmiÅŸ mod - adÄ±m adÄ±m sonuÃ§lar */}
              {advancedMode && results.steps && (
                <div className="mt-4 border-t border-gray-200 dark:border-gray-700 pt-4">
                  <h5 className="font-semibold mb-2">AdÄ±m AdÄ±m SonuÃ§lar:</h5>

                  {/* VeritabanÄ± BaÄŸlantÄ±sÄ± */}
                  {results.steps.dbConnection && (
                    <div className="mb-2 p-2 bg-white dark:bg-gray-900 rounded border border-gray-200 dark:border-gray-700">
                      <p className="font-medium">VeritabanÄ± BaÄŸlantÄ±sÄ±:</p>
                      <p
                        className={
                          results.steps.dbConnection.success
                            ? "text-green-600 dark:text-green-400"
                            : "text-red-600 dark:text-red-400"
                        }
                      >
                        {results.steps.dbConnection.message}
                      </p>
                    </div>
                  )}

                  {/* Feed Bilgileri */}
                  {results.steps.feeds && (
                    <div className="mb-2 p-2 bg-white dark:bg-gray-900 rounded border border-gray-200 dark:border-gray-700">
                      <p className="font-medium">Feed KayÄ±tlarÄ±:</p>
                      <p
                        className={
                          results.steps.feeds.success
                            ? "text-green-600 dark:text-green-400"
                            : "text-red-600 dark:text-red-400"
                        }
                      >
                        {results.steps.feeds.message}
                      </p>
                    </div>
                  )}

                  {/* Ä°Ã§erik Bilgileri */}
                  {results.steps.feedContent && (
                    <div className="mb-2 p-2 bg-white dark:bg-gray-900 rounded border border-gray-200 dark:border-gray-700">
                      <p className="font-medium">Feed Ä°Ã§eriÄŸi:</p>
                      <p
                        className={
                          results.steps.feedContent.success
                            ? "text-green-600 dark:text-green-400"
                            : "text-red-600 dark:text-red-400"
                        }
                      >
                        {results.steps.feedContent.message}
                      </p>
                    </div>
                  )}

                  {/* EtkileÅŸim Bilgileri */}
                  {results.steps.interactions && (
                    <div className="mb-2 p-2 bg-white dark:bg-gray-900 rounded border border-gray-200 dark:border-gray-700">
                      <p className="font-medium">EtkileÅŸimler:</p>
                      <p>{results.steps.interactions.message}</p>
                    </div>
                  )}

                  {/* OnarÄ±m Bilgileri */}
                  {results.steps.repair && (
                    <div className="mb-2 p-2 bg-white dark:bg-gray-900 rounded border border-gray-200 dark:border-gray-700">
                      <p className="font-medium">OnarÄ±m:</p>
                      <p
                        className={
                          results.steps.repair.success
                            ? "text-green-600 dark:text-green-400"
                            : "text-red-600 dark:text-red-400"
                        }
                      >
                        {results.steps.repair.message}
                      </p>
                    </div>
                  )}

                  {/* Ã–nbellek Temizleme */}
                  {results.steps.cacheCleared && (
                    <div className="mb-2 p-2 bg-white dark:bg-gray-900 rounded border border-gray-200 dark:border-gray-700">
                      <p className="font-medium">Ã–nbellek Temizleme:</p>
                      <p
                        className={
                          results.steps.cacheCleared.success
                            ? "text-green-600 dark:text-green-400"
                            : "text-red-600 dark:text-red-400"
                        }
                      >
                        {results.steps.cacheCleared.message}
                      </p>
                    </div>
                  )}
                </div>
              )}

              {/* Basit mod gÃ¶sterimi */}
              {!advancedMode && (
                <>
                  {/* VeritabanÄ± durumu */}
                  {results.dbConnection && (
                    <div className="mt-4">
                      <h5 className="font-semibold">VeritabanÄ± BaÄŸlantÄ±sÄ±:</h5>
                      <p
                        className={
                          results.dbConnection.success
                            ? "text-green-600 dark:text-green-400"
                            : "text-red-600 dark:text-red-400"
                        }
                      >
                        {results.dbConnection.message}
                      </p>
                      {results.dbConnection.pingTime && (
                        <p className="text-gray-600 dark:text-gray-400 text-sm">
                          YanÄ±t sÃ¼resi: {results.dbConnection.pingTime}
                        </p>
                      )}
                    </div>
                  )}

                  {/* Feed bilgileri */}
                  {results.userFeeds && (
                    <div className="mt-4">
                      <h5 className="font-semibold">Feed Abonelikleri:</h5>
                      <p>
                        {results.userFeeds.success
                          ? `${results.userFeeds.feedCount} feed bulundu`
                          : results.userFeeds.message}
                      </p>
                    </div>
                  )}

                  {/* Ä°Ã§erik bilgileri */}
                  {results.rssItems && (
                    <div className="mt-4">
                      <h5 className="font-semibold">RSS Ä°Ã§eriÄŸi:</h5>
                      <p>
                        {results.rssItems.success
                          ? results.rssItems.message
                          : results.rssItems.message}
                      </p>
                    </div>
                  )}

                  {results.youtubeItems && (
                    <div className="mt-4">
                      <h5 className="font-semibold">YouTube Ä°Ã§eriÄŸi:</h5>
                      <p>
                        {results.youtubeItems.success
                          ? results.youtubeItems.message
                          : results.youtubeItems.message}
                      </p>
                    </div>
                  )}

                  {/* EtkileÅŸim bilgileri */}
                  {results.userInteractions && (
                    <div className="mt-4">
                      <h5 className="font-semibold">
                        KullanÄ±cÄ± EtkileÅŸimleri:
                      </h5>
                      <p>
                        {results.userInteractions.success
                          ? results.userInteractions.message
                          : results.userInteractions.message}
                      </p>
                    </div>
                  )}
                </>
              )}
            </div>
          )}

          {/* OnarÄ±m sonuÃ§larÄ± */}
          {!advancedMode && fixResult && (
            <div
              className={`p-4 rounded-lg ${
                fixResult.success
                  ? "bg-green-100 dark:bg-green-800/20"
                  : "bg-red-100 dark:bg-red-800/20"
              }`}
            >
              <h4 className="font-bold mb-2">OnarÄ±m Sonucu:</h4>

              {fixResult.success ? (
                <>
                  <p className="text-green-600 dark:text-green-400 mb-2">
                    OnarÄ±m iÅŸlemi baÅŸarÄ±yla tamamlandÄ±!
                  </p>

                  {fixResult.interactions && (
                    <div className="mt-2">
                      <h5 className="font-semibold">EtkileÅŸim OnarÄ±mÄ±:</h5>
                      <p>{fixResult.interactions.message}</p>

                      {fixResult.interactions.created > 0 && (
                        <div className="mt-2 text-sm">
                          <p>
                            OnarÄ±lan etkileÅŸimler:{" "}
                            {fixResult.interactions.created}
                          </p>
                        </div>
                      )}
                    </div>
                  )}

                  <div className="mt-3">
                    <p className="text-gray-700 dark:text-gray-300">
                      SayfayÄ± yenileyin veya tekrar tanÄ± Ã§alÄ±ÅŸtÄ±rÄ±n.
                    </p>
                  </div>
                </>
              ) : (
                <>
                  <p className="text-red-600 dark:text-red-400 mb-2">
                    OnarÄ±m sÄ±rasÄ±nda bir hata oluÅŸtu.
                  </p>
                  {fixResult.error && (
                    <p className="text-sm bg-red-50 dark:bg-red-900/20 p-2 rounded">
                      {fixResult.error}
                    </p>
                  )}
                </>
              )}
            </div>
          )}

          {/* YardÄ±m Bilgisi */}
          <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
            <h4 className="text-lg font-semibold mb-2">YardÄ±m</h4>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Bu panel feed verilerini gÃ¶rÃ¼ntÃ¼leme sorunlarÄ±nÄ± tanÄ±lamak ve
              onarmak iÃ§in kullanÄ±lÄ±r.
              {!advancedMode ? (
                <>
                  "Sistemi TanÄ±la" butonu ile feed sisteminin durumunu kontrol
                  edebilirsiniz. "Otomatik Onar" butonu ile veri iliÅŸkilendirme
                  ve Ã¶nbellek sorunlarÄ±nÄ± dÃ¼zeltebilirsiniz.
                </>
              ) : (
                <>
                  "GeliÅŸmiÅŸ TanÄ± ve OnarÄ±m" butonu ile tÃ¼m sistem bileÅŸenlerini
                  kontrol edip otomatik onarÄ±m yapabilirsiniz. "Repository
                  Kontrol" butonu ile metot Ã§aÄŸrÄ±larÄ±ndaki parametre sÄ±rasÄ±
                  sorunlarÄ±nÄ± tespit edebilirsiniz.
                </>
              )}
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
